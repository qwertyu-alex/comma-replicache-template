// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Message {
  id                 String           @id
  sender             String
  content            String
  ord                Int
  deleted            Boolean
  version            Int
  replicacheServerId String
  replicacheServer   ReplicacheServer @relation(fields: [replicacheServerId], references: [id], onDelete: Cascade)
}

/// Replicache Space State
model ReplicacheServer {
  id      String @id @default(cuid())
  version Int

  userAuthorizations UserAuthorization[]
  messages           Message[]
}

model ReplicacheClient {
  id               String @id
  client_group_id  String
  last_mutation_id Int
  version          Int
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserAuthorization {
  id                 String           @id @default(cuid())
  replicacheServerId String
  replicacheServer   ReplicacheServer @relation(fields: [replicacheServerId], references: [id], onDelete: Cascade)

  User User?
}

model User {
  id                  String             @id @default(cuid())
  name                String?
  email               String?            @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  userAuthorizationId String             @unique
  userAuthorization   UserAuthorization? @relation(fields: [userAuthorizationId], references: [id], onDelete: Cascade)

  accounts Account[]
  sessions Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
